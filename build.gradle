/*
 * Copyright 2008-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'groovy'
    id 'idea'
    id 'maven-publish'
    id 'com.jfrog.bintray'             version '1.7.3'
    id 'net.nemerosa.versioning'       version '2.6.0'
    id 'com.github.ben-manes.versions' version '0.14.0'
    id 'com.gradle.plugin-publish'     version '0.9.7'
    id 'com.github.hierynomus.license' version '0.11.0'
    id 'com.github.kt3k.coveralls'     version '2.8.1'
}

apply from: 'gradle/credentials.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-quality.gradle'

repositories {
    flatDir(dirs: file('src/lib'))
    jcenter()
    mavenCentral()
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile 'org.pushingpixels:flamingo:5.2.00-dev'
    compile 'xml-apis:xml-apis-ext:1.3.04'

    compile "org.apache.xmlgraphics:batik-anim:$batikVersion"
    compile "org.apache.xmlgraphics:batik-awt-util:$batikVersion"
    compile "org.apache.xmlgraphics:batik-bridge:$batikVersion"
    compile "org.apache.xmlgraphics:batik-codec:$batikVersion"
    compile "org.apache.xmlgraphics:batik-css:$batikVersion"
    compile "org.apache.xmlgraphics:batik-dom:$batikVersion"
    compile "org.apache.xmlgraphics:batik-ext:$batikVersion"
    compile "org.apache.xmlgraphics:batik-extension:$batikVersion"
    compile "org.apache.xmlgraphics:batik-gui-util:$batikVersion"
    compile "org.apache.xmlgraphics:batik-gvt:$batikVersion"
    compile "org.apache.xmlgraphics:batik-parser:$batikVersion"
    compile "org.apache.xmlgraphics:batik-script:$batikVersion"
    compile "org.apache.xmlgraphics:batik-svg-dom:$batikVersion"
    compile "org.apache.xmlgraphics:batik-svggen:$batikVersion"
    compile "org.apache.xmlgraphics:batik-swing:$batikVersion"
    compile "org.apache.xmlgraphics:batik-transcoder:$batikVersion"
    compile "org.apache.xmlgraphics:batik-util:$batikVersion"
    compile "org.apache.xmlgraphics:batik-xml:$batikVersion"
    testCompile "junit:junit:4.12"
}

compileGroovy {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    group 'Build'
    description 'An archive of the javadoc'
    classifier 'javadoc'
    from groovydoc.destinationDir
}

jar.finalizedBy sourcesJar
jar.finalizedBy javadocJar

artifacts {
    sourcesJar
    javadocJar
}